kyo_module: WITH
##
## Ends in an error in state: 0.
##
## kyo_module' -> . kyo_module [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE WITH
##
## Ends in an error in state: 1.
##
## kyo_type_decl -> TYPE . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) EQUAL kyo_record_decl [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_type_decl -> TYPE . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) EQUAL kyo_enum_decl [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT WITH
##
## Ends in an error in state: 2.
##
## kyo_type_decl -> TYPE IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) EQUAL kyo_record_decl [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_type_decl -> TYPE IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) EQUAL kyo_enum_decl [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LPARENT WITH
##
## Ends in an error in state: 3.
##
## loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) -> LPARENT . separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)) RPARENT [ LBRACE EQUAL ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LPARENT PolymorphicVar WITH
##
## Ends in an error in state: 4.
##
## separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)) -> PolymorphicVar . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)) -> PolymorphicVar . COMMA separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## PolymorphicVar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LPARENT PolymorphicVar COMMA WITH
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)) -> PolymorphicVar COMMA . separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## PolymorphicVar COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT LPARENT PolymorphicVar RPARENT WITH
##
## Ends in an error in state: 9.
##
## kyo_type_decl -> TYPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) . EQUAL kyo_record_decl [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_type_decl -> TYPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) . EQUAL kyo_enum_decl [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic))))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL WITH
##
## Ends in an error in state: 10.
##
## kyo_type_decl -> TYPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) EQUAL . kyo_record_decl [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_type_decl -> TYPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) EQUAL . kyo_enum_decl [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL PIPE WITH
##
## Ends in an error in state: 11.
##
## nonempty_list(kyo_enum_case) -> PIPE . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) [ TYPE LET EXTERNAL EOF EFFECT ]
## nonempty_list(kyo_enum_case) -> PIPE . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) nonempty_list(kyo_enum_case) [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL PIPE IDENT WITH
##
## Ends in an error in state: 12.
##
## nonempty_list(kyo_enum_case) -> PIPE IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) [ TYPE LET EXTERNAL EOF EFFECT ]
## nonempty_list(kyo_enum_case) -> PIPE IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) nonempty_list(kyo_enum_case) [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## PIPE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT IDENT LPARENT WITH
##
## Ends in an error in state: 13.
##
## loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) -> LPARENT . separated_nonempty_list(COMMA,located(kyo_type)) RPARENT [ VAL TYPE RPARENT RBRACE PIPE LET EXTERNAL EQUAL EOF EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT REF WITH
##
## Ends in an error in state: 14.
##
## kyo_type -> REF . LPARENT kyo_type RPARENT [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT REF LPARENT WITH
##
## Ends in an error in state: 15.
##
## kyo_type -> REF LPARENT . kyo_type RPARENT [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## REF LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT Module_IDENT WITH
##
## Ends in an error in state: 17.
##
## separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) -> Module_IDENT . [ IN DOT ]
## separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) -> Module_IDENT . DOUBLECOLON separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) [ IN DOT ]
##
## The known suffix of the stack is as follows:
## Module_IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT Module_IDENT DOUBLECOLON WITH
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) -> Module_IDENT DOUBLECOLON . separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) [ IN DOT ]
##
## The known suffix of the stack is as follows:
## Module_IDENT DOUBLECOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT LPARENT WITH
##
## Ends in an error in state: 20.
##
## kyo_type -> LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER WITH
##
## Ends in an error in state: 21.
##
## kyo_type -> HANDLER . LPARENT kyo_effect RPARENT [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## HANDLER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT WITH
##
## Ends in an error in state: 22.
##
## kyo_type -> HANDLER LPARENT . kyo_effect RPARENT [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## HANDLER LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT LPARENT WITH
##
## Ends in an error in state: 23.
##
## kyo_effect -> LPARENT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LPARENT separated_nonempty_list(COMMA,located(kyo_type)) RPARENT RPARENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
## kyo_effect -> LPARENT . separated_nonempty_list(AMPERSAND,located(kyo_effect)) RPARENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT BACKTICK WITH
##
## Ends in an error in state: 24.
##
## kyo_effect -> BACKTICK . IDENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT Module_IDENT IN
##
## Ends in an error in state: 26.
##
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) -> separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) . DOT [ PREFIX_QUESTIONMARK PREFIX_EXCLA IDENT DOT BACKTICK ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOUBLECOLON,located(Module_IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) -> Module_IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT LPARENT Module_IDENT DOT WITH
##
## Ends in an error in state: 30.
##
## kyo_effect -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT [ RPARENT AMPERSAND ]
## kyo_effect -> LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT LPARENT separated_nonempty_list(COMMA,located(kyo_type)) RPARENT RPARENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT LPARENT IDENT WITH
##
## Ends in an error in state: 31.
##
## kyo_effect -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . [ RPARENT AMPERSAND ]
## kyo_effect -> LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . LPARENT separated_nonempty_list(COMMA,located(kyo_type)) RPARENT RPARENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT LPARENT IDENT LPARENT WITH
##
## Ends in an error in state: 32.
##
## kyo_effect -> LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LPARENT . separated_nonempty_list(COMMA,located(kyo_type)) RPARENT RPARENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT FUNCTION WITH
##
## Ends in an error in state: 33.
##
## kyo_type -> FUNCTION . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT FUNCTION LPARENT WITH
##
## Ends in an error in state: 34.
##
## kyo_type -> FUNCTION LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT Module_IDENT DOT WITH
##
## Ends in an error in state: 36.
##
## kyo_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT IDENT WITH
##
## Ends in an error in state: 37.
##
## kyo_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT FUNCTION LPARENT RPARENT WITH
##
## Ends in an error in state: 40.
##
## kyo_type -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT FUNCTION LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 41.
##
## kyo_type -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT Module_IDENT DOT WITH
##
## Ends in an error in state: 42.
##
## kyo_effect -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT FUNCTION LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 44.
##
## kyo_type -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT PolymorphicVar WITH
##
## Ends in an error in state: 46.
##
## separated_nonempty_list(COMMA,located(kyo_type)) -> kyo_type . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kyo_type)) -> kyo_type . COMMA separated_nonempty_list(COMMA,located(kyo_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT IDENT COMMA WITH
##
## Ends in an error in state: 47.
##
## separated_nonempty_list(COMMA,located(kyo_type)) -> kyo_type COMMA . separated_nonempty_list(COMMA,located(kyo_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT LPARENT IDENT LPARENT IDENT RPARENT WITH
##
## Ends in an error in state: 50.
##
## kyo_effect -> LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LPARENT separated_nonempty_list(COMMA,located(kyo_type)) RPARENT . RPARENT [ RPARENT REF PolymorphicVar Module_IDENT LPARENT IDENT HANDLER FUNCTION AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPARENT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LPARENT separated_nonempty_list(COMMA,located(kyo_type)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT LPARENT BACKTICK IDENT WITH
##
## Ends in an error in state: 52.
##
## separated_nonempty_list(AMPERSAND,located(kyo_effect)) -> kyo_effect . [ RPARENT ]
## separated_nonempty_list(AMPERSAND,located(kyo_effect)) -> kyo_effect . AMPERSAND separated_nonempty_list(AMPERSAND,located(kyo_effect)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT LPARENT IDENT AMPERSAND WITH
##
## Ends in an error in state: 53.
##
## separated_nonempty_list(AMPERSAND,located(kyo_effect)) -> kyo_effect AMPERSAND . separated_nonempty_list(AMPERSAND,located(kyo_effect)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_effect AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT HANDLER LPARENT IDENT WITH
##
## Ends in an error in state: 55.
##
## kyo_type -> HANDLER LPARENT kyo_effect . RPARENT [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## HANDLER LPARENT kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT REF LPARENT PolymorphicVar WITH
##
## Ends in an error in state: 59.
##
## kyo_type -> REF LPARENT kyo_type . RPARENT [ VAL RPARENT RBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## REF LPARENT kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL PIPE IDENT LPARENT IDENT RPARENT WITH
##
## Ends in an error in state: 63.
##
## nonempty_list(kyo_enum_case) -> PIPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) . [ TYPE LET EXTERNAL EOF EFFECT ]
## nonempty_list(kyo_enum_case) -> PIPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type)))) . nonempty_list(kyo_enum_case) [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## PIPE IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_type))))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL LBRACE WITH
##
## Ends in an error in state: 65.
##
## kyo_record_decl -> LBRACE . nonempty_list(terminated(kyo_record_field,COMMA)) RBRACE [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_record_decl -> LBRACE . separated_nonempty_list(COMMA,kyo_record_field) RBRACE [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL LBRACE IDENT WITH
##
## Ends in an error in state: 66.
##
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT . COLON kyo_type COMMA [ RBRACE ]
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT . COLON kyo_type COMMA nonempty_list(terminated(kyo_record_field,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_record_field) -> IDENT . COLON kyo_type [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_record_field) -> IDENT . COLON kyo_type COMMA separated_nonempty_list(COMMA,kyo_record_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL LBRACE IDENT COLON WITH
##
## Ends in an error in state: 67.
##
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT COLON . kyo_type COMMA [ RBRACE ]
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT COLON . kyo_type COMMA nonempty_list(terminated(kyo_record_field,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_record_field) -> IDENT COLON . kyo_type [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_record_field) -> IDENT COLON . kyo_type COMMA separated_nonempty_list(COMMA,kyo_record_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL LBRACE IDENT COLON PolymorphicVar WITH
##
## Ends in an error in state: 68.
##
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT COLON kyo_type . COMMA [ RBRACE ]
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT COLON kyo_type . COMMA nonempty_list(terminated(kyo_record_field,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_record_field) -> IDENT COLON kyo_type . [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_record_field) -> IDENT COLON kyo_type . COMMA separated_nonempty_list(COMMA,kyo_record_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: TYPE IDENT EQUAL LBRACE IDENT COLON IDENT COMMA WITH
##
## Ends in an error in state: 69.
##
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT COLON kyo_type COMMA . [ RBRACE ]
## nonempty_list(terminated(kyo_record_field,COMMA)) -> IDENT COLON kyo_type COMMA . nonempty_list(terminated(kyo_record_field,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_record_field) -> IDENT COLON kyo_type COMMA . separated_nonempty_list(COMMA,kyo_record_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON kyo_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET WITH
##
## Ends in an error in state: 79.
##
## kyo_global_decl(kyo_expression) -> LET . IDENT option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET . BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_QUESTIONMARK WITH
##
## Ends in an error in state: 80.
##
## kyo_global_decl(kyo_expression) -> LET PREFIX_QUESTIONMARK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT COLON WITH
##
## Ends in an error in state: 81.
##
## option(preceded(COLON,located(kyo_type))) -> COLON . kyo_type [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_QUESTIONMARK COLON PolymorphicVar WITH
##
## Ends in an error in state: 83.
##
## kyo_global_decl(kyo_expression) -> LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_QUESTIONMARK EQUAL WITH
##
## Ends in an error in state: 84.
##
## kyo_global_decl(kyo_expression) -> LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL WHILE WITH
##
## Ends in an error in state: 85.
##
## kyo_expression -> WHILE . kyo_expression LBRACE kyo_expression RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM WITH
##
## Ends in an error in state: 87.
##
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM Module_IDENT DOT WITH
##
## Ends in an error in state: 88.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . PREFIX_EXCLA option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . PREFIX_QUESTIONMARK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM PREFIX_QUESTIONMARK WITH
##
## Ends in an error in state: 89.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT WITH
##
## Ends in an error in state: 90.
##
## option(kyo_function_call_spe) -> LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_expression))) RPARENT option(located(kyo_anon_function)) loption(kyo_eff_handler_param) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL MATCH WITH
##
## Ends in an error in state: 91.
##
## kyo_expression -> MATCH . kyo_expression LBRACE nonempty_list(kyo_pattern_branch) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## MATCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LPARENT WITH
##
## Ends in an error in state: 92.
##
## kyo_expression -> LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_expression))) RPARENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET WITH
##
## Ends in an error in state: 93.
##
## kyo_expression -> LET . kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> LET . OPEN separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET OPEN WITH
##
## Ends in an error in state: 98.
##
## kyo_expression -> LET OPEN . separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET OPEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET OPEN Module_IDENT DOT
##
## Ends in an error in state: 99.
##
## kyo_expression -> LET OPEN separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) . IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET OPEN separated_nonempty_list(DOUBLECOLON,located(Module_IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) -> Module_IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET OPEN Module_IDENT IN WITH
##
## Ends in an error in state: 100.
##
## kyo_expression -> LET OPEN separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) IN . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET OPEN separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER WITH
##
## Ends in an error in state: 102.
##
## kyo_handler -> HANDLER . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LBRACE nonempty_list(kyo_handler_implementation(kyo_resumable_expression)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## HANDLER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER Module_IDENT DOT WITH
##
## Ends in an error in state: 103.
##
## kyo_handler -> HANDLER loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT LBRACE nonempty_list(kyo_handler_implementation(kyo_resumable_expression)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## HANDLER loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT WITH
##
## Ends in an error in state: 104.
##
## kyo_handler -> HANDLER loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . LBRACE nonempty_list(kyo_handler_implementation(kyo_resumable_expression)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## HANDLER loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE WITH
##
## Ends in an error in state: 105.
##
## kyo_handler -> HANDLER loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LBRACE . nonempty_list(kyo_handler_implementation(kyo_resumable_expression)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## HANDLER loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET WITH
##
## Ends in an error in state: 106.
##
## kyo_global_decl(kyo_resumable_expression) -> LET . IDENT option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET . BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET PREFIX_QUESTIONMARK WITH
##
## Ends in an error in state: 107.
##
## kyo_global_decl(kyo_resumable_expression) -> LET PREFIX_QUESTIONMARK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET PREFIX_QUESTIONMARK COLON PolymorphicVar WITH
##
## Ends in an error in state: 108.
##
## kyo_global_decl(kyo_resumable_expression) -> LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET PREFIX_QUESTIONMARK EQUAL WITH
##
## Ends in an error in state: 109.
##
## kyo_global_decl(kyo_resumable_expression) -> LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET IDENT EQUAL RESUME WITH
##
## Ends in an error in state: 110.
##
## kyo_resumable_expression -> RESUME . kyo_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## RESUME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL ANON_FUNCTION WITH
##
## Ends in an error in state: 115.
##
## kyo_expression -> ANON_FUNCTION . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression END [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL ANON_FUNCTION LPARENT WITH
##
## Ends in an error in state: 116.
##
## kyo_expression -> ANON_FUNCTION LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression END [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET LPARENT WITH
##
## Ends in an error in state: 117.
##
## kyo_pattern -> LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> LPARENT . kyo_pattern COLON kyo_type RPARENT [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET DOT WITH
##
## Ends in an error in state: 122.
##
## kyo_pattern -> DOT . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_pattern)))) [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET DOT IDENT WITH
##
## Ends in an error in state: 123.
##
## kyo_pattern -> DOT IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_pattern)))) [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET DOT IDENT LPARENT WITH
##
## Ends in an error in state: 124.
##
## loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_pattern)))) -> LPARENT . separated_nonempty_list(COMMA,located(kyo_pattern)) RPARENT [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK WITH
##
## Ends in an error in state: 128.
##
## kyo_pattern -> BACKTICK . INFIX_PIPE BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_AMPERSAND BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_EQUAL BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_INF BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_SUP BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_CARET BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_PLUS BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_MINUS BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_MULT BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_DIV BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_DOLLAR BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_PERCENT BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> BACKTICK . INFIX_TILDE BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 129.
##
## kyo_pattern -> BACKTICK INFIX_TILDE . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 131.
##
## kyo_pattern -> BACKTICK INFIX_SUP . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 133.
##
## kyo_pattern -> BACKTICK INFIX_PLUS . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 135.
##
## kyo_pattern -> BACKTICK INFIX_PIPE . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 137.
##
## kyo_pattern -> BACKTICK INFIX_PERCENT . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 139.
##
## kyo_pattern -> BACKTICK INFIX_MULT . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 141.
##
## kyo_pattern -> BACKTICK INFIX_MINUS . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 143.
##
## kyo_pattern -> BACKTICK INFIX_INF . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 145.
##
## kyo_pattern -> BACKTICK INFIX_EQUAL . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 147.
##
## kyo_pattern -> BACKTICK INFIX_DOLLAR . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 149.
##
## kyo_pattern -> BACKTICK INFIX_DIV . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 151.
##
## kyo_pattern -> BACKTICK INFIX_CARET . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 153.
##
## kyo_pattern -> BACKTICK INFIX_AMPERSAND . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL ANON_FUNCTION LPARENT CMP_EQUAL WITH
##
## Ends in an error in state: 157.
##
## kyo_pattern -> kyo_pattern . PIPE kyo_pattern [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS IDENT [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_EXCLA [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_QUESTIONMARK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PIPE BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_AMPERSAND BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_EQUAL BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_INF BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_SUP BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_CARET BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PLUS BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MINUS BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MULT BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DIV BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DOLLAR BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PERCENT BACKTICK [ RPARENT PIPE COMMA AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_TILDE BACKTICK [ RPARENT PIPE COMMA AS ]
## separated_nonempty_list(COMMA,located(kyo_pattern)) -> kyo_pattern . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kyo_pattern)) -> kyo_pattern . COMMA separated_nonempty_list(COMMA,located(kyo_pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL PIPE WITH
##
## Ends in an error in state: 158.
##
## kyo_pattern -> kyo_pattern PIPE . kyo_pattern [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL ANON_FUNCTION LPARENT CMP_EQUAL COMMA WITH
##
## Ends in an error in state: 160.
##
## separated_nonempty_list(COMMA,located(kyo_pattern)) -> kyo_pattern COMMA . separated_nonempty_list(COMMA,located(kyo_pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS WITH
##
## Ends in an error in state: 162.
##
## kyo_pattern -> kyo_pattern AS . IDENT [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . PREFIX_EXCLA [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . PREFIX_QUESTIONMARK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_PIPE BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_AMPERSAND BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_EQUAL BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_INF BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_SUP BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_CARET BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_PLUS BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_MINUS BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_MULT BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_DIV BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_DOLLAR BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_PERCENT BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS . BACKTICK INFIX_TILDE BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK WITH
##
## Ends in an error in state: 166.
##
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_PIPE BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_AMPERSAND BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_EQUAL BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_INF BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_SUP BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_CARET BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_PLUS BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_MINUS BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_MULT BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_DIV BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_DOLLAR BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_PERCENT BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern AS BACKTICK . INFIX_TILDE BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 167.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_TILDE . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 169.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_SUP . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 171.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_PLUS . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 173.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_PIPE . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 175.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_PERCENT . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 177.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_MULT . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 179.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_MINUS . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 181.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_INF . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 183.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_EQUAL . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 185.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_DOLLAR . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 187.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_DIV . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 189.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_CARET . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL AS BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 191.
##
## kyo_pattern -> kyo_pattern AS BACKTICK INFIX_AMPERSAND . BACKTICK [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kyo_pattern AS BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET LPARENT CMP_EQUAL WITH
##
## Ends in an error in state: 197.
##
## kyo_pattern -> kyo_pattern . PIPE kyo_pattern [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> LPARENT kyo_pattern . COLON kyo_type RPARENT [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS IDENT [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_EXCLA [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_QUESTIONMARK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PIPE BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_AMPERSAND BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_EQUAL BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_INF BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_SUP BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_CARET BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PLUS BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MINUS BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MULT BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DIV BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DOLLAR BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PERCENT BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_TILDE BACKTICK [ RPARENT PIPE COMMA COLON AS ]
## separated_nonempty_list(COMMA,located(kyo_pattern)) -> kyo_pattern . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kyo_pattern)) -> kyo_pattern . COMMA separated_nonempty_list(COMMA,located(kyo_pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## LPARENT kyo_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET LPARENT CMP_EQUAL COLON WITH
##
## Ends in an error in state: 198.
##
## kyo_pattern -> LPARENT kyo_pattern COLON . kyo_type RPARENT [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kyo_pattern COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET LPARENT CMP_EQUAL COLON PolymorphicVar WITH
##
## Ends in an error in state: 199.
##
## kyo_pattern -> LPARENT kyo_pattern COLON kyo_type . RPARENT [ RPARENT PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kyo_pattern COLON kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL ANON_FUNCTION LPARENT RPARENT WITH
##
## Ends in an error in state: 202.
##
## kyo_expression -> ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT . MINUS_SUP kyo_expression END [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL ANON_FUNCTION LPARENT RPARENT MINUS_SUP WITH
##
## Ends in an error in state: 203.
##
## kyo_expression -> ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP . kyo_expression END [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND WITH
##
## Ends in an error in state: 204.
##
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND . DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT WITH
##
## Ends in an error in state: 205.
##
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT Module_IDENT DOT WITH
##
## Ends in an error in state: 206.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . PREFIX_EXCLA option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . PREFIX_QUESTIONMARK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT PREFIX_QUESTIONMARK WITH
##
## Ends in an error in state: 207.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT PREFIX_EXCLA WITH
##
## Ends in an error in state: 209.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT IDENT WITH
##
## Ends in an error in state: 211.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK WITH
##
## Ends in an error in state: 213.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 214.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_TILDE BACKTICK WITH
##
## Ends in an error in state: 215.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 217.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_SUP BACKTICK WITH
##
## Ends in an error in state: 218.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 220.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_PLUS BACKTICK WITH
##
## Ends in an error in state: 221.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 223.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_PIPE BACKTICK WITH
##
## Ends in an error in state: 224.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 226.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_PERCENT BACKTICK WITH
##
## Ends in an error in state: 227.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 229.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_MULT BACKTICK WITH
##
## Ends in an error in state: 230.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 232.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_MINUS BACKTICK WITH
##
## Ends in an error in state: 233.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 235.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_INF BACKTICK WITH
##
## Ends in an error in state: 236.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 238.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_EQUAL BACKTICK WITH
##
## Ends in an error in state: 239.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 241.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_DOLLAR BACKTICK WITH
##
## Ends in an error in state: 242.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 244.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_DIV BACKTICK WITH
##
## Ends in an error in state: 245.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 247.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_CARET BACKTICK WITH
##
## Ends in an error in state: 248.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 250.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL AMPERSAND DOT BACKTICK INFIX_AMPERSAND BACKTICK WITH
##
## Ends in an error in state: 251.
##
## kyo_expression -> AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## AMPERSAND DOT loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL Module_IDENT DOT WITH
##
## Ends in an error in state: 253.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . PREFIX_EXCLA option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . PREFIX_QUESTIONMARK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . BACKTICK INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT DOT LBRACE nonempty_list(terminated(kyo_expr_record_line,COMMA)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . IDENT DOT LBRACE separated_nonempty_list(COMMA,kyo_expr_record_line) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) . DOT IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_expression)))) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PREFIX_QUESTIONMARK WITH
##
## Ends in an error in state: 254.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PREFIX_EXCLA WITH
##
## Ends in an error in state: 256.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT WITH
##
## Ends in an error in state: 258.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . DOT LBRACE nonempty_list(terminated(kyo_expr_record_line,COMMA)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . DOT LBRACE separated_nonempty_list(COMMA,kyo_expr_record_line) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT DOT WITH
##
## Ends in an error in state: 259.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT DOT . LBRACE nonempty_list(terminated(kyo_expr_record_line,COMMA)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT DOT . LBRACE separated_nonempty_list(COMMA,kyo_expr_record_line) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT DOT LBRACE WITH
##
## Ends in an error in state: 260.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT DOT LBRACE . nonempty_list(terminated(kyo_expr_record_line,COMMA)) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT DOT LBRACE . separated_nonempty_list(COMMA,kyo_expr_record_line) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT DOT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT DOT LBRACE IDENT WITH
##
## Ends in an error in state: 261.
##
## nonempty_list(terminated(kyo_expr_record_line,COMMA)) -> IDENT . option(preceded(EQUAL,located(kyo_expression))) COMMA [ RBRACE ]
## nonempty_list(terminated(kyo_expr_record_line,COMMA)) -> IDENT . option(preceded(EQUAL,located(kyo_expression))) COMMA nonempty_list(terminated(kyo_expr_record_line,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_expr_record_line) -> IDENT . option(preceded(EQUAL,located(kyo_expression))) [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_expr_record_line) -> IDENT . option(preceded(EQUAL,located(kyo_expression))) COMMA separated_nonempty_list(COMMA,kyo_expr_record_line) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT DOT LBRACE IDENT EQUAL WITH
##
## Ends in an error in state: 262.
##
## option(preceded(EQUAL,located(kyo_expression))) -> EQUAL . kyo_expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT DOT LBRACE IDENT EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 265.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## option(preceded(EQUAL,located(kyo_expression))) -> EQUAL kyo_expression . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT MINUS_SUP WITH
##
## Ends in an error in state: 266.
##
## kyo_pathed_expression -> kyo_expression MINUS_SUP . IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_TILDE WITH
##
## Ends in an error in state: 268.
##
## kyo_expression -> kyo_expression INFIX_TILDE . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_TILDE CMP_EQUAL WITH
##
## Ends in an error in state: 269.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_TILDE kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_TILDE kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_PLUS WITH
##
## Ends in an error in state: 270.
##
## kyo_expression -> kyo_expression INFIX_PLUS . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_PLUS CMP_EQUAL WITH
##
## Ends in an error in state: 271.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_PLUS kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_PLUS kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_PERCENT WITH
##
## Ends in an error in state: 272.
##
## kyo_expression -> kyo_expression INFIX_PERCENT . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_PERCENT CMP_EQUAL WITH
##
## Ends in an error in state: 273.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_PERCENT kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_PERCENT kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_MULT WITH
##
## Ends in an error in state: 274.
##
## kyo_expression -> kyo_expression INFIX_MULT . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_MULT CMP_EQUAL WITH
##
## Ends in an error in state: 275.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_MULT kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_MULT kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_DIV WITH
##
## Ends in an error in state: 276.
##
## kyo_expression -> kyo_expression INFIX_DIV . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_DIV CMP_EQUAL WITH
##
## Ends in an error in state: 277.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_DIV kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_DIV kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_MINUS WITH
##
## Ends in an error in state: 278.
##
## kyo_expression -> kyo_expression INFIX_MINUS . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_MINUS CMP_EQUAL WITH
##
## Ends in an error in state: 279.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_MINUS kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_MINUS kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_SUP WITH
##
## Ends in an error in state: 280.
##
## kyo_expression -> kyo_expression INFIX_SUP . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_SUP CMP_EQUAL WITH
##
## Ends in an error in state: 281.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_SUP kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_SUP kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_CARET WITH
##
## Ends in an error in state: 282.
##
## kyo_expression -> kyo_expression INFIX_CARET . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_CARET CMP_EQUAL WITH
##
## Ends in an error in state: 283.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_CARET kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_CARET kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_PIPE WITH
##
## Ends in an error in state: 284.
##
## kyo_expression -> kyo_expression INFIX_PIPE . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_PIPE CMP_EQUAL WITH
##
## Ends in an error in state: 285.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_PIPE kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_PIPE kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_INF WITH
##
## Ends in an error in state: 286.
##
## kyo_expression -> kyo_expression INFIX_INF . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_INF CMP_EQUAL WITH
##
## Ends in an error in state: 287.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_INF kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_INF kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_EQUAL WITH
##
## Ends in an error in state: 288.
##
## kyo_expression -> kyo_expression INFIX_EQUAL . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 289.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_EQUAL kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_DOLLAR WITH
##
## Ends in an error in state: 290.
##
## kyo_expression -> kyo_expression INFIX_DOLLAR . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_DOLLAR CMP_EQUAL WITH
##
## Ends in an error in state: 291.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_DOLLAR kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_DOLLAR kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_AMPERSAND WITH
##
## Ends in an error in state: 292.
##
## kyo_expression -> kyo_expression INFIX_AMPERSAND . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT INFIX_AMPERSAND CMP_EQUAL WITH
##
## Ends in an error in state: 293.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression INFIX_AMPERSAND kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## kyo_expression INFIX_AMPERSAND kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT DOT LBRACE IDENT COMMA WITH
##
## Ends in an error in state: 295.
##
## nonempty_list(terminated(kyo_expr_record_line,COMMA)) -> IDENT option(preceded(EQUAL,located(kyo_expression))) COMMA . [ RBRACE ]
## nonempty_list(terminated(kyo_expr_record_line,COMMA)) -> IDENT option(preceded(EQUAL,located(kyo_expression))) COMMA . nonempty_list(terminated(kyo_expr_record_line,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kyo_expr_record_line) -> IDENT option(preceded(EQUAL,located(kyo_expression))) COMMA . separated_nonempty_list(COMMA,kyo_expr_record_line) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT option(preceded(EQUAL,located(kyo_expression))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL DOT WITH
##
## Ends in an error in state: 303.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) DOT . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_expression)))) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL DOT IDENT WITH
##
## Ends in an error in state: 304.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) DOT IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_expression)))) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL DOT IDENT LPARENT WITH
##
## Ends in an error in state: 305.
##
## loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_expression)))) -> LPARENT . separated_nonempty_list(COMMA,located(kyo_expression)) RPARENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LPARENT CMP_EQUAL WITH
##
## Ends in an error in state: 308.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ RPARENT MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND COMMA ]
## separated_nonempty_list(COMMA,located(kyo_expression)) -> kyo_expression . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kyo_expression)) -> kyo_expression . COMMA separated_nonempty_list(COMMA,located(kyo_expression)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LPARENT IDENT COMMA WITH
##
## Ends in an error in state: 309.
##
## separated_nonempty_list(COMMA,located(kyo_expression)) -> kyo_expression COMMA . separated_nonempty_list(COMMA,located(kyo_expression)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kyo_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK WITH
##
## Ends in an error in state: 312.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 313.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_TILDE BACKTICK WITH
##
## Ends in an error in state: 314.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 316.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_SUP BACKTICK WITH
##
## Ends in an error in state: 317.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 319.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_PLUS BACKTICK WITH
##
## Ends in an error in state: 320.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 322.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_PIPE BACKTICK WITH
##
## Ends in an error in state: 323.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 325.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_PERCENT BACKTICK WITH
##
## Ends in an error in state: 326.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 328.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_MULT BACKTICK WITH
##
## Ends in an error in state: 329.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 331.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_MINUS BACKTICK WITH
##
## Ends in an error in state: 332.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 334.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_INF BACKTICK WITH
##
## Ends in an error in state: 335.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 337.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_EQUAL BACKTICK WITH
##
## Ends in an error in state: 338.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 340.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_DOLLAR BACKTICK WITH
##
## Ends in an error in state: 341.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 343.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_DIV BACKTICK WITH
##
## Ends in an error in state: 344.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 346.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_CARET BACKTICK WITH
##
## Ends in an error in state: 347.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 349.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL BACKTICK INFIX_AMPERSAND BACKTICK WITH
##
## Ends in an error in state: 350.
##
## kyo_pathed_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL ANON_FUNCTION LPARENT RPARENT MINUS_SUP CMP_EQUAL WITH
##
## Ends in an error in state: 352.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression . END [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET IDENT EQUAL RESUME CMP_EQUAL WITH
##
## Ends in an error in state: 354.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_resumable_expression -> RESUME kyo_expression . [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## RESUME kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET IDENT EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 356.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ RBRACE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_resumable_expression -> kyo_expression . [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET PREFIX_EXCLA WITH
##
## Ends in an error in state: 357.
##
## kyo_global_decl(kyo_resumable_expression) -> LET PREFIX_EXCLA . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET PREFIX_EXCLA COLON PolymorphicVar WITH
##
## Ends in an error in state: 358.
##
## kyo_global_decl(kyo_resumable_expression) -> LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET PREFIX_EXCLA EQUAL WITH
##
## Ends in an error in state: 359.
##
## kyo_global_decl(kyo_resumable_expression) -> LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET IDENT WITH
##
## Ends in an error in state: 361.
##
## kyo_global_decl(kyo_resumable_expression) -> LET IDENT . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET IDENT COLON PolymorphicVar WITH
##
## Ends in an error in state: 362.
##
## kyo_global_decl(kyo_resumable_expression) -> LET IDENT option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET IDENT EQUAL WITH
##
## Ends in an error in state: 363.
##
## kyo_global_decl(kyo_resumable_expression) -> LET IDENT option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK WITH
##
## Ends in an error in state: 365.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK . INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 366.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_TILDE . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_TILDE BACKTICK WITH
##
## Ends in an error in state: 367.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_TILDE BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_TILDE BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 368.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_TILDE BACKTICK EQUAL WITH
##
## Ends in an error in state: 369.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 371.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_SUP . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_SUP BACKTICK WITH
##
## Ends in an error in state: 372.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_SUP BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_SUP BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 373.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_SUP BACKTICK EQUAL WITH
##
## Ends in an error in state: 374.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 376.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PLUS . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PLUS BACKTICK WITH
##
## Ends in an error in state: 377.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PLUS BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PLUS BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 378.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PLUS BACKTICK EQUAL WITH
##
## Ends in an error in state: 379.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 381.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PIPE . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PIPE BACKTICK WITH
##
## Ends in an error in state: 382.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PIPE BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PIPE BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 383.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PIPE BACKTICK EQUAL WITH
##
## Ends in an error in state: 384.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 386.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PERCENT . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PERCENT BACKTICK WITH
##
## Ends in an error in state: 387.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PERCENT BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PERCENT BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 388.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_PERCENT BACKTICK EQUAL WITH
##
## Ends in an error in state: 389.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 391.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MULT . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MULT BACKTICK WITH
##
## Ends in an error in state: 392.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MULT BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MULT BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 393.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MULT BACKTICK EQUAL WITH
##
## Ends in an error in state: 394.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 396.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MINUS . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MINUS BACKTICK WITH
##
## Ends in an error in state: 397.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MINUS BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MINUS BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 398.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_MINUS BACKTICK EQUAL WITH
##
## Ends in an error in state: 399.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 401.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_INF . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_INF BACKTICK WITH
##
## Ends in an error in state: 402.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_INF BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_INF BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 403.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_INF BACKTICK EQUAL WITH
##
## Ends in an error in state: 404.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 406.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_EQUAL . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_EQUAL BACKTICK WITH
##
## Ends in an error in state: 407.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_EQUAL BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_EQUAL BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 408.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_EQUAL BACKTICK EQUAL WITH
##
## Ends in an error in state: 409.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 411.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DOLLAR . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DOLLAR BACKTICK WITH
##
## Ends in an error in state: 412.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DOLLAR BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DOLLAR BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 413.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DOLLAR BACKTICK EQUAL WITH
##
## Ends in an error in state: 414.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 416.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DIV . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DIV BACKTICK WITH
##
## Ends in an error in state: 417.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DIV BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DIV BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 418.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_DIV BACKTICK EQUAL WITH
##
## Ends in an error in state: 419.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 421.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_CARET . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_CARET BACKTICK WITH
##
## Ends in an error in state: 422.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_CARET BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_CARET BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 423.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_CARET BACKTICK EQUAL WITH
##
## Ends in an error in state: 424.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 426.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_AMPERSAND . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_AMPERSAND BACKTICK WITH
##
## Ends in an error in state: 427.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_AMPERSAND BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_AMPERSAND BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 428.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL HANDLER IDENT LBRACE LET BACKTICK INFIX_AMPERSAND BACKTICK EQUAL WITH
##
## Ends in an error in state: 429.
##
## kyo_global_decl(kyo_resumable_expression) -> LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_resumable_expression [ RBRACE LET ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET OPEN Module_IDENT IN CMP_EQUAL WITH
##
## Ends in an error in state: 435.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> LET OPEN separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) IN kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET OPEN separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)) IN kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL WITH
##
## Ends in an error in state: 436.
##
## kyo_expression -> LET kyo_pattern . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pattern -> kyo_pattern . PIPE kyo_pattern [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS IDENT [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_EXCLA [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_QUESTIONMARK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PIPE BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_AMPERSAND BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_EQUAL BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_INF BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_SUP BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_CARET BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PLUS BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MINUS BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MULT BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DIV BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DOLLAR BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PERCENT BACKTICK [ PIPE EQUAL COLON AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_TILDE BACKTICK [ PIPE EQUAL COLON AS ]
##
## The known suffix of the stack is as follows:
## LET kyo_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL COLON PolymorphicVar WITH
##
## Ends in an error in state: 437.
##
## kyo_expression -> LET kyo_pattern option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET kyo_pattern option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL EQUAL WITH
##
## Ends in an error in state: 438.
##
## kyo_expression -> LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 439.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
## kyo_expression -> LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . IN kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN ]
##
## The known suffix of the stack is as follows:
## LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL EQUAL IDENT IN WITH
##
## Ends in an error in state: 440.
##
## kyo_expression -> LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression IN . kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL LET CMP_EQUAL EQUAL IDENT IN CMP_EQUAL WITH
##
## Ends in an error in state: 441.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression IN kyo_expression . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LET kyo_pattern option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression IN kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL MATCH CMP_EQUAL WITH
##
## Ends in an error in state: 445.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> MATCH kyo_expression . LBRACE nonempty_list(kyo_pattern_branch) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
##
## The known suffix of the stack is as follows:
## MATCH kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL MATCH IDENT LBRACE WITH
##
## Ends in an error in state: 446.
##
## kyo_expression -> MATCH kyo_expression LBRACE . nonempty_list(kyo_pattern_branch) RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## MATCH kyo_expression LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL MATCH IDENT LBRACE PIPE WITH
##
## Ends in an error in state: 447.
##
## kyo_pattern_branch -> PIPE . kyo_pattern MINUS_SUP kyo_expression [ RBRACE PIPE ]
##
## The known suffix of the stack is as follows:
## PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL MATCH IDENT LBRACE PIPE CMP_EQUAL WITH
##
## Ends in an error in state: 448.
##
## kyo_pattern -> kyo_pattern . PIPE kyo_pattern [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS IDENT [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_EXCLA [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS PREFIX_QUESTIONMARK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PIPE BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_AMPERSAND BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_EQUAL BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_INF BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_SUP BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_CARET BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PLUS BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MINUS BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_MULT BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DIV BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_DOLLAR BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_PERCENT BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern -> kyo_pattern . AS BACKTICK INFIX_TILDE BACKTICK [ PIPE MINUS_SUP AS ]
## kyo_pattern_branch -> PIPE kyo_pattern . MINUS_SUP kyo_expression [ RBRACE PIPE ]
##
## The known suffix of the stack is as follows:
## PIPE kyo_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL MATCH IDENT LBRACE PIPE CMP_EQUAL MINUS_SUP WITH
##
## Ends in an error in state: 449.
##
## kyo_pattern_branch -> PIPE kyo_pattern MINUS_SUP . kyo_expression [ RBRACE PIPE ]
##
## The known suffix of the stack is as follows:
## PIPE kyo_pattern MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL MATCH IDENT LBRACE PIPE CMP_EQUAL MINUS_SUP CMP_EQUAL WITH
##
## Ends in an error in state: 450.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ RBRACE PIPE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_pattern_branch -> PIPE kyo_pattern MINUS_SUP kyo_expression . [ RBRACE PIPE ]
##
## The known suffix of the stack is as follows:
## PIPE kyo_pattern MINUS_SUP kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 456.
##
## option(kyo_function_call_spe) -> LPARENT loption(separated_nonempty_list(COMMA,located(kyo_expression))) RPARENT . option(located(kyo_anon_function)) loption(kyo_eff_handler_param) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT loption(separated_nonempty_list(COMMA,located(kyo_expression))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT ANON_FUNCTION WITH
##
## Ends in an error in state: 457.
##
## option(located(kyo_anon_function)) -> ANON_FUNCTION . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression END [ WITH TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT ANON_FUNCTION LPARENT WITH
##
## Ends in an error in state: 458.
##
## option(located(kyo_anon_function)) -> ANON_FUNCTION LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression END [ WITH TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT ANON_FUNCTION LPARENT RPARENT WITH
##
## Ends in an error in state: 460.
##
## option(located(kyo_anon_function)) -> ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT . MINUS_SUP kyo_expression END [ WITH TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT ANON_FUNCTION LPARENT RPARENT MINUS_SUP WITH
##
## Ends in an error in state: 461.
##
## option(located(kyo_anon_function)) -> ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP . kyo_expression END [ WITH TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT ANON_FUNCTION LPARENT RPARENT MINUS_SUP CMP_EQUAL WITH
##
## Ends in an error in state: 462.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND END ]
## option(located(kyo_anon_function)) -> ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression . END [ WITH TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## ANON_FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kyo_pattern))) RPARENT MINUS_SUP kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT ANON_FUNCTION LPARENT RPARENT MINUS_SUP IDENT END WILDCARD
##
## Ends in an error in state: 464.
##
## option(kyo_function_call_spe) -> LPARENT loption(separated_nonempty_list(COMMA,located(kyo_expression))) RPARENT option(located(kyo_anon_function)) . loption(kyo_eff_handler_param) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT loption(separated_nonempty_list(COMMA,located(kyo_expression))) RPARENT option(located(kyo_anon_function))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH WITH
##
## Ends in an error in state: 465.
##
## loption(kyo_eff_handler_param) -> WITH . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH PREFIX_QUESTIONMARK WITH
##
## Ends in an error in state: 466.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> PREFIX_QUESTIONMARK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> PREFIX_QUESTIONMARK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH PREFIX_QUESTIONMARK AMPERSAND WITH
##
## Ends in an error in state: 467.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> PREFIX_QUESTIONMARK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PREFIX_QUESTIONMARK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH PREFIX_EXCLA WITH
##
## Ends in an error in state: 468.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> PREFIX_EXCLA . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> PREFIX_EXCLA . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH PREFIX_EXCLA AMPERSAND WITH
##
## Ends in an error in state: 469.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> PREFIX_EXCLA AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PREFIX_EXCLA AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH IDENT WITH
##
## Ends in an error in state: 470.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> IDENT . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> IDENT . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH IDENT AMPERSAND WITH
##
## Ends in an error in state: 471.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> IDENT AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK WITH
##
## Ends in an error in state: 472.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_PIPE BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_AMPERSAND BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_EQUAL BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_INF BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_SUP BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_CARET BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_PLUS BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_MINUS BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_MULT BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_DIV BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_DOLLAR BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_PERCENT BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_TILDE BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_PIPE BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_AMPERSAND BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_EQUAL BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_INF BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_SUP BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_CARET BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_PLUS BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_MINUS BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_MULT BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_DIV BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_DOLLAR BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_PERCENT BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK . INFIX_TILDE BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 473.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_TILDE . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_TILDE . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_TILDE BACKTICK WITH
##
## Ends in an error in state: 474.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_TILDE BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_TILDE BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_TILDE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_TILDE BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 475.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_TILDE BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_TILDE BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 477.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_SUP . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_SUP . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_SUP BACKTICK WITH
##
## Ends in an error in state: 478.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_SUP BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_SUP BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_SUP BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 479.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_SUP BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_SUP BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 481.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PLUS . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PLUS . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PLUS BACKTICK WITH
##
## Ends in an error in state: 482.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PLUS BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PLUS BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PLUS BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 483.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PLUS BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PLUS BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 485.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PIPE . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PIPE . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PIPE BACKTICK WITH
##
## Ends in an error in state: 486.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PIPE BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PIPE BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PIPE BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 487.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PIPE BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PIPE BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 489.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PERCENT . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PERCENT . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PERCENT BACKTICK WITH
##
## Ends in an error in state: 490.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PERCENT BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PERCENT BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_PERCENT BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 491.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_PERCENT BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_PERCENT BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 493.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MULT . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MULT . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_MULT BACKTICK WITH
##
## Ends in an error in state: 494.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MULT BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MULT BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_MULT BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 495.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MULT BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MULT BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 497.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MINUS . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MINUS . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_MINUS BACKTICK WITH
##
## Ends in an error in state: 498.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MINUS BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MINUS BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_MINUS BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 499.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_MINUS BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_MINUS BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 501.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_INF . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_INF . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_INF BACKTICK WITH
##
## Ends in an error in state: 502.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_INF BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_INF BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_INF BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 503.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_INF BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_INF BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 505.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_EQUAL . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_EQUAL . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_EQUAL BACKTICK WITH
##
## Ends in an error in state: 506.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_EQUAL BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_EQUAL BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_EQUAL BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 507.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_EQUAL BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_EQUAL BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 509.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DOLLAR . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DOLLAR . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_DOLLAR BACKTICK WITH
##
## Ends in an error in state: 510.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DOLLAR BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DOLLAR BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_DOLLAR BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 511.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DOLLAR BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DOLLAR BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 513.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DIV . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DIV . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_DIV BACKTICK WITH
##
## Ends in an error in state: 514.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DIV BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DIV BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_DIV BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 515.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_DIV BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_DIV BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 517.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_CARET . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_CARET . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_CARET BACKTICK WITH
##
## Ends in an error in state: 518.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_CARET BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_CARET BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_CARET BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 519.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_CARET BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_CARET BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 521.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_AMPERSAND . BACKTICK [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_AMPERSAND . BACKTICK AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_AMPERSAND BACKTICK WITH
##
## Ends in an error in state: 522.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_AMPERSAND BACKTICK . [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_AMPERSAND BACKTICK . AMPERSAND separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL IDENT LPARENT RPARENT WITH BACKTICK INFIX_AMPERSAND BACKTICK AMPERSAND WITH
##
## Ends in an error in state: 523.
##
## separated_nonempty_list(AMPERSAND,loc_var_identifier) -> BACKTICK INFIX_AMPERSAND BACKTICK AMPERSAND . separated_nonempty_list(AMPERSAND,loc_var_identifier) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## BACKTICK INFIX_AMPERSAND BACKTICK AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM PREFIX_EXCLA WITH
##
## Ends in an error in state: 531.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM IDENT WITH
##
## Ends in an error in state: 533.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK WITH
##
## Ends in an error in state: 535.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PIPE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_EQUAL BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_INF BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_SUP BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_CARET BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PLUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_MINUS BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_MULT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_DIV BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_PERCENT BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK . INFIX_TILDE BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 536.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_TILDE BACKTICK WITH
##
## Ends in an error in state: 537.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_TILDE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 539.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_SUP BACKTICK WITH
##
## Ends in an error in state: 540.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 542.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_PLUS BACKTICK WITH
##
## Ends in an error in state: 543.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 545.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_PIPE BACKTICK WITH
##
## Ends in an error in state: 546.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 548.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_PERCENT BACKTICK WITH
##
## Ends in an error in state: 549.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 551.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_MULT BACKTICK WITH
##
## Ends in an error in state: 552.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 554.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_MINUS BACKTICK WITH
##
## Ends in an error in state: 555.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 557.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_INF BACKTICK WITH
##
## Ends in an error in state: 558.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 560.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_EQUAL BACKTICK WITH
##
## Ends in an error in state: 561.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 563.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_DOLLAR BACKTICK WITH
##
## Ends in an error in state: 564.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 566.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_DIV BACKTICK WITH
##
## Ends in an error in state: 567.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 569.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_CARET BACKTICK WITH
##
## Ends in an error in state: 570.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 572.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL PERFORM BACKTICK INFIX_AMPERSAND BACKTICK WITH
##
## Ends in an error in state: 573.
##
## kyo_expression -> PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK . option(kyo_function_call_spe) [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## PERFORM loption(terminated(separated_nonempty_list(DOUBLECOLON,located(Module_IDENT)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL WHILE CMP_EQUAL WITH
##
## Ends in an error in state: 575.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> WHILE kyo_expression . LBRACE kyo_expression RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ MINUS_SUP LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
##
## The known suffix of the stack is as follows:
## WHILE kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL WHILE IDENT LBRACE WITH
##
## Ends in an error in state: 576.
##
## kyo_expression -> WHILE kyo_expression LBRACE . kyo_expression RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
##
## The known suffix of the stack is as follows:
## WHILE kyo_expression LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL WHILE IDENT LBRACE CMP_EQUAL WITH
##
## Ends in an error in state: 577.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
## kyo_expression -> WHILE kyo_expression LBRACE kyo_expression . RBRACE [ TYPE RPARENT RBRACE PIPE MINUS_SUP LET LBRACE INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND IN EXTERNAL EOF END EFFECT COMMA ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ RBRACE MINUS_SUP INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND ]
##
## The known suffix of the stack is as follows:
## WHILE kyo_expression LBRACE kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_QUESTIONMARK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 579.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_QUESTIONMARK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_EXCLA WITH
##
## Ends in an error in state: 580.
##
## kyo_global_decl(kyo_expression) -> LET PREFIX_EXCLA . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_EXCLA COLON PolymorphicVar WITH
##
## Ends in an error in state: 581.
##
## kyo_global_decl(kyo_expression) -> LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_EXCLA EQUAL WITH
##
## Ends in an error in state: 582.
##
## kyo_global_decl(kyo_expression) -> LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET PREFIX_EXCLA EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 583.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET PREFIX_EXCLA option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT WITH
##
## Ends in an error in state: 584.
##
## kyo_global_decl(kyo_expression) -> LET IDENT . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT COLON PolymorphicVar WITH
##
## Ends in an error in state: 585.
##
## kyo_global_decl(kyo_expression) -> LET IDENT option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL WITH
##
## Ends in an error in state: 586.
##
## kyo_global_decl(kyo_expression) -> LET IDENT option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET IDENT EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 587.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET IDENT option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK WITH
##
## Ends in an error in state: 588.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK . INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 589.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_TILDE . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_TILDE BACKTICK WITH
##
## Ends in an error in state: 590.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_TILDE BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_TILDE BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 591.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_TILDE BACKTICK EQUAL WITH
##
## Ends in an error in state: 592.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_TILDE BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 593.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_TILDE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 594.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_SUP . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_SUP BACKTICK WITH
##
## Ends in an error in state: 595.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_SUP BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_SUP BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 596.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_SUP BACKTICK EQUAL WITH
##
## Ends in an error in state: 597.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_SUP BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 598.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 599.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PLUS . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PLUS BACKTICK WITH
##
## Ends in an error in state: 600.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PLUS BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PLUS BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 601.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PLUS BACKTICK EQUAL WITH
##
## Ends in an error in state: 602.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PLUS BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 603.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 604.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PIPE . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PIPE BACKTICK WITH
##
## Ends in an error in state: 605.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PIPE BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PIPE BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 606.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PIPE BACKTICK EQUAL WITH
##
## Ends in an error in state: 607.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PIPE BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 608.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 609.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PERCENT . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PERCENT BACKTICK WITH
##
## Ends in an error in state: 610.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PERCENT BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PERCENT BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 611.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PERCENT BACKTICK EQUAL WITH
##
## Ends in an error in state: 612.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_PERCENT BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 613.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 614.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MULT . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MULT BACKTICK WITH
##
## Ends in an error in state: 615.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MULT BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MULT BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 616.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MULT BACKTICK EQUAL WITH
##
## Ends in an error in state: 617.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MULT BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 618.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 619.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MINUS . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MINUS BACKTICK WITH
##
## Ends in an error in state: 620.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MINUS BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MINUS BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 621.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MINUS BACKTICK EQUAL WITH
##
## Ends in an error in state: 622.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_MINUS BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 623.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 624.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_INF . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_INF BACKTICK WITH
##
## Ends in an error in state: 625.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_INF BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_INF BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 626.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_INF BACKTICK EQUAL WITH
##
## Ends in an error in state: 627.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_INF BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 628.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 629.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_EQUAL . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_EQUAL BACKTICK WITH
##
## Ends in an error in state: 630.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_EQUAL BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_EQUAL BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 631.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_EQUAL BACKTICK EQUAL WITH
##
## Ends in an error in state: 632.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_EQUAL BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 633.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 634.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DOLLAR . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DOLLAR BACKTICK WITH
##
## Ends in an error in state: 635.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DOLLAR BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DOLLAR BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 636.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DOLLAR BACKTICK EQUAL WITH
##
## Ends in an error in state: 637.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DOLLAR BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 638.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 639.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DIV . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DIV BACKTICK WITH
##
## Ends in an error in state: 640.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DIV BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DIV BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 641.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DIV BACKTICK EQUAL WITH
##
## Ends in an error in state: 642.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_DIV BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 643.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 644.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_CARET . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_CARET BACKTICK WITH
##
## Ends in an error in state: 645.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_CARET BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_CARET BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 646.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_CARET BACKTICK EQUAL WITH
##
## Ends in an error in state: 647.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_CARET BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 648.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 649.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_AMPERSAND . BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_AMPERSAND BACKTICK WITH
##
## Ends in an error in state: 650.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_AMPERSAND BACKTICK . option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_AMPERSAND BACKTICK COLON PolymorphicVar WITH
##
## Ends in an error in state: 651.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) . EQUAL kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_AMPERSAND BACKTICK EQUAL WITH
##
## Ends in an error in state: 652.
##
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL . kyo_expression [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: LET BACKTICK INFIX_AMPERSAND BACKTICK EQUAL CMP_EQUAL WITH
##
## Ends in an error in state: 653.
##
## kyo_expression -> kyo_expression . INFIX_PIPE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_AMPERSAND kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_EQUAL kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_INF kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_SUP kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_CARET kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PLUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MINUS kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_MULT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DIV kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_DOLLAR kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_PERCENT kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_expression -> kyo_expression . INFIX_TILDE kyo_expression [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
## kyo_global_decl(kyo_expression) -> LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression . [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_pathed_expression -> kyo_expression . MINUS_SUP IDENT [ TYPE MINUS_SUP LET INFIX_TILDE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## LET BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kyo_type))) EQUAL kyo_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL WITH
##
## Ends in an error in state: 654.
##
## kyo_external_decl -> EXTERNAL . IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL . BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_QUESTIONMARK WITH
##
## Ends in an error in state: 655.
##
## kyo_external_decl -> EXTERNAL PREFIX_QUESTIONMARK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT WITH
##
## Ends in an error in state: 656.
##
## kyo_external_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT RPARENT WITH
##
## Ends in an error in state: 658.
##
## kyo_external_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 659.
##
## kyo_external_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 660.
##
## kyo_external_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 661.
##
## kyo_external_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 662.
##
## kyo_external_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_EXCLA WITH
##
## Ends in an error in state: 664.
##
## kyo_external_decl -> EXTERNAL PREFIX_EXCLA . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_EXCLA LPARENT WITH
##
## Ends in an error in state: 665.
##
## kyo_external_decl -> EXTERNAL PREFIX_EXCLA LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_EXCLA LPARENT RPARENT WITH
##
## Ends in an error in state: 667.
##
## kyo_external_decl -> EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_EXCLA LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 668.
##
## kyo_external_decl -> EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_EXCLA LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 669.
##
## kyo_external_decl -> EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_EXCLA LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 670.
##
## kyo_external_decl -> EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL PREFIX_EXCLA LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 671.
##
## kyo_external_decl -> EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT WITH
##
## Ends in an error in state: 673.
##
## kyo_external_decl -> EXTERNAL IDENT . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT WITH
##
## Ends in an error in state: 674.
##
## kyo_external_decl -> EXTERNAL IDENT LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT RPARENT WITH
##
## Ends in an error in state: 676.
##
## kyo_external_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 677.
##
## kyo_external_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 678.
##
## kyo_external_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 679.
##
## kyo_external_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL IDENT LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 680.
##
## kyo_external_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK WITH
##
## Ends in an error in state: 682.
##
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
## kyo_external_decl -> EXTERNAL BACKTICK . INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE WITH
##
## Ends in an error in state: 683.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE BACKTICK WITH
##
## Ends in an error in state: 684.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT WITH
##
## Ends in an error in state: 685.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 687.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 688.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 689.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 690.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 691.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_TILDE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP WITH
##
## Ends in an error in state: 693.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK WITH
##
## Ends in an error in state: 694.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT WITH
##
## Ends in an error in state: 695.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 697.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 698.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 699.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 700.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 701.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS WITH
##
## Ends in an error in state: 703.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK WITH
##
## Ends in an error in state: 704.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT WITH
##
## Ends in an error in state: 705.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 707.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 708.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 709.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 710.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 711.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE WITH
##
## Ends in an error in state: 713.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK WITH
##
## Ends in an error in state: 714.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT WITH
##
## Ends in an error in state: 715.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 717.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 718.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 719.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 720.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 721.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT WITH
##
## Ends in an error in state: 723.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK WITH
##
## Ends in an error in state: 724.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT WITH
##
## Ends in an error in state: 725.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 727.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 728.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 729.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 730.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 731.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT WITH
##
## Ends in an error in state: 733.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK WITH
##
## Ends in an error in state: 734.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT WITH
##
## Ends in an error in state: 735.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 737.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 738.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 739.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 740.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 741.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS WITH
##
## Ends in an error in state: 743.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK WITH
##
## Ends in an error in state: 744.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT WITH
##
## Ends in an error in state: 745.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 747.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 748.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 749.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 750.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 751.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF WITH
##
## Ends in an error in state: 753.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF BACKTICK WITH
##
## Ends in an error in state: 754.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT WITH
##
## Ends in an error in state: 755.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 757.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 758.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 759.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 760.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 761.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL WITH
##
## Ends in an error in state: 763.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK WITH
##
## Ends in an error in state: 764.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT WITH
##
## Ends in an error in state: 765.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 767.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 768.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 769.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 770.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 771.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR WITH
##
## Ends in an error in state: 773.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK WITH
##
## Ends in an error in state: 774.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT WITH
##
## Ends in an error in state: 775.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 777.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 778.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 779.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 780.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 781.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV WITH
##
## Ends in an error in state: 783.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK WITH
##
## Ends in an error in state: 784.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT WITH
##
## Ends in an error in state: 785.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 787.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 788.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 789.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 790.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 791.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET WITH
##
## Ends in an error in state: 793.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK WITH
##
## Ends in an error in state: 794.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT WITH
##
## Ends in an error in state: 795.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 797.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 798.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 799.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 800.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 801.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND WITH
##
## Ends in an error in state: 803.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK WITH
##
## Ends in an error in state: 804.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT WITH
##
## Ends in an error in state: 805.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT WITH
##
## Ends in an error in state: 807.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT . COLON kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT COLON WITH
##
## Ends in an error in state: 808.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON . kyo_effect kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT COLON IDENT WITH
##
## Ends in an error in state: 809.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect . kyo_type EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT COLON IDENT PolymorphicVar WITH
##
## Ends in an error in state: 810.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type . EQUAL String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT COLON IDENT IDENT EQUAL WITH
##
## Ends in an error in state: 811.
##
## kyo_external_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL . String_lit [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,located(kyo_type))) RPARENT COLON kyo_effect kyo_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT WITH
##
## Ends in an error in state: 813.
##
## kyo_effect_decl -> EFFECT . IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) LBRACE list(kyo_effect_sig) RBRACE [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EFFECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT WITH
##
## Ends in an error in state: 814.
##
## kyo_effect_decl -> EFFECT IDENT . loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) LBRACE list(kyo_effect_sig) RBRACE [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EFFECT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LPARENT PolymorphicVar RPARENT WITH
##
## Ends in an error in state: 815.
##
## kyo_effect_decl -> EFFECT IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) . LBRACE list(kyo_effect_sig) RBRACE [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EFFECT IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic))))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LBRACE WITH
##
## Ends in an error in state: 816.
##
## kyo_effect_decl -> EFFECT IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) LBRACE . list(kyo_effect_sig) RBRACE [ TYPE LET EXTERNAL EOF EFFECT ]
##
## The known suffix of the stack is as follows:
## EFFECT IDENT loption(parenthesis(separated_nonempty_list(COMMA,located(kyo_ky_polymorphic)))) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LBRACE VAL WITH
##
## Ends in an error in state: 817.
##
## kyo_effect_sig -> VAL . IDENT COLON kyo_type [ VAL RBRACE ]
##
## The known suffix of the stack is as follows:
## VAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LBRACE VAL IDENT WITH
##
## Ends in an error in state: 818.
##
## kyo_effect_sig -> VAL IDENT . COLON kyo_type [ VAL RBRACE ]
##
## The known suffix of the stack is as follows:
## VAL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LBRACE VAL IDENT COLON WITH
##
## Ends in an error in state: 819.
##
## kyo_effect_sig -> VAL IDENT COLON . kyo_type [ VAL RBRACE ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LBRACE VAL IDENT COLON PolymorphicVar WITH
##
## Ends in an error in state: 823.
##
## list(kyo_effect_sig) -> kyo_effect_sig . list(kyo_effect_sig) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## kyo_effect_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kyo_module: EFFECT IDENT LBRACE RBRACE WITH
##
## Ends in an error in state: 828.
##
## list(kyo_node) -> kyo_node . list(kyo_node) [ EOF ]
##
## The known suffix of the stack is as follows:
## kyo_node
##

<YOUR SYNTAX ERROR MESSAGE HERE>

