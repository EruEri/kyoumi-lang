effect ask('a) {
    fn ask() : `a 'a
}

type list('a) = 
    | nil
    | cons ('a, list('a))
    
// fn map(list: a, mapper: b): `a list('a) = match list {
//     .nil -> .ni
// }

external `+`(int, int): ` b int = "kyoumi_int_add"

fn main(): `a int = 
    let open Effect in
    let open Operator in
    let ask = handler ask {
        fn ask() : `a 'a = 
            resume 10
    } in
    let asked = &.ask() in
    // let x = `+`(10, 20) in
    10