effect ask<'a> {
    val default : int
    fn ask() : 'a
    fn ask(int, int) : 'a
}

type option<'a> = 
    | none
    | some('a)

type struct('a) = {
    x: 'a,
    s: string
}

external print(int, string) : bool = ""

let (++) = 
    let d = 10;
    fun x y -> 


fn ask<'a>() : (ask<'a>) option<'a> =
    let x = perform();

let x = @array(1, 2, 4, 8)
ley y = 1::2::[]
    
fn map<'a, 'b>(l: list<'a>, mapper: fn('a) -> `a 'b ) : _ list('b) = 
    match l {
        | [] -> []
        | t::q -> {}
    }

fn main() : int = 
    let handler : ask<int> {
        let default = 10;
        fn ask() = fun () -> x + y;
    }

    let x = ask() with handler ; 

    let x = fun x y -> x + y in  
    let x = 19;
    let () = match x {
        _ => 
    };
    10
